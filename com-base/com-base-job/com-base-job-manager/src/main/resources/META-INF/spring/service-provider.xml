<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-3.2.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://code.alibabatech.com/schema/dubbo
    http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
    
    
    <!-- disconf -->
	<bean id="disconfMgrBean" class="com.baidu.disconf.client.DisconfMgrBean" destroy-method="destroy">
		<property name="scanPackage" value="com.base.service" />
	</bean>
	<bean id="propertyConfigurer" class="com.baidu.disconf.client.addons.properties.ReloadingPropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="propertiesArray">
			<list>
				<ref bean="disconf_config" />
			</list>
		</property>
	</bean>
	
	<bean id="disconf_config" class="com.baidu.disconf.client.addons.properties.ReloadablePropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>dubbo.properties</value>
				<!-- <value>config.properties</value> -->
				<!-- <value>mapper.properties</value> -->
				<value>db/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<dubbo:annotation/>

    <dubbo:application name="${dubbo.application.name}" owner="${dubbo.application.owner}" organization="dubbox"/>
    <bean class="com.base.scheduler.env.EnvIniter" init-method="init"></bean>

	<context:annotation-config />
	<context:component-scan base-package="com.base.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 开启事务注解驱动 -->
	<tx:annotation-driven order="100"/>

	<!-- jdbc.propertis Directory -->
<!-- 	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="file:./conf/db/jdbc.properties" />
	</bean> -->

	<!-- ================================数据源 管理类数据库================================================= -->
	<bean id="MyDataSource" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="MyDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>


	<!-- ================================扫描mybatis xml配置文件================================================= -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.base.job.admin.mapper"></property>
	</bean>

	<!-- ================================事务相关控制 管理类数据库================================================= -->
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="MyDataSource"></property>
		<qualifier value="wp_admin" />
	</bean>

	<!-- ================================数据源 数据库================================================= -->
	<bean id="ds_collect" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${collect.jdbc.driver}" />
		<property name="url" value="${collect.jdbc.url}" />
		<property name="username" value="${collect.jdbc.username}" />
		<property name="password" value="${collect.jdbc.password}" />
	</bean>

	<!-- SqlSessionFactory -->
	<bean id="sqlSF_collect" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds_collect" />
		<property name="configLocation" value="classpath:mybatis-config-collect.xml"></property>
	</bean>

	<bean name="dstm_collect"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds_collect"></property>
		<qualifier value="wp_collect" />
	</bean>

	<!-- ================================扫描mybatis xml配置文件================================================= -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSF_collect" />
		<property name="basePackage" value="com.base.job.collect.mapper"></property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSF_collect" />
		<property name="basePackage" value="com.base.common.mybatis.dao.mapper"></property>
	</bean>

	<!-- 配置事务切面 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*" read-only="true" propagation="REQUIRED" />
			<tx:method name="select*" read-only="true" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<!-- 其它方法使用默认的事务设置 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

<!-- 	<bean id="serviceAdvisor" class="com.base.advisor.ServiceAdvisor"></bean>
	<aop:config>
		配置切入点
		<aop:pointcut id="txPointcut"
			expression="execution(* com.base.job.*.service.*.*(..))" />

		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" order="2"/>
		<aop:aspect order="1" ref="serviceAdvisor">
			<aop:after-returning method="afterReturning" pointcut-ref="txPointcut"/>
		</aop:aspect>
	</aop:config> -->
	
    <dubbo:registry address="${dubbo.registry.address}"/>

    <!--uncomment this if you want to test dubbo's monitor-->
    <!-- <dubbo:monitor protocol="registry"/> -->

    <!-- here we demonstrate both annotation-based and xml-based configs -->
    <!--<dubbo:annotation package="com.alibaba.dubbo.demo.user.facade" />-->

    <dubbo:protocol name="dubbo" port="${dubbo.protocol.port}" serialization="kryo" optimizer="com.base.scheduler.service.SerializationOptimizerImpl"/>
    <dubbo:service interface="com.base.scheduler.service.JobSchedulerService" timeout="${dubbo.service.timeout}" ref="jobSchdulerService"  protocol="dubbo"/>
    
    <bean id="jobSchdulerService" class="com.base.scheduler.service.impl.JobSchedulerServiceImpl" >
    </bean>
</beans>  